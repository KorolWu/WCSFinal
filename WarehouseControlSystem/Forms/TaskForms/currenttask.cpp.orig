#include "currenttask.h"

CurrentTask::CurrentTask(int width,int height,QWidget *parent):BaseFrom(parent)
{
    this->width = width;
    this->height = height;
    initTableView();
}

void CurrentTask::setTableViewValue()
{
    int row_count = Myconfig::GetInstance()->m_taskMap.size();
    for(int j = 0; j< 8 ;j++)
    {
        auto it = Myconfig::GetInstance()->m_taskMap.begin();
        for(int i = 0;i<row_count;i++)
        {
            if(j == 111)
                model->setItem(i,j,new QStandardItem(QString("%1").arg(i)));
            else if(j == 0)
                model->setItem(i,j,new QStandardItem(it.value().taskNum));
            else if(j == 1)
                model->setItem(i,j,new QStandardItem(it.value().status));
            else if(j == 2)
                model->setItem(i,j,new QStandardItem(it.value().boxNum));
            else if(j == 3)
                model->setItem(i,j,new QStandardItem(QString("%1").arg(it.value().pripty)));
            else if(j == 4)
                model->setItem(i,j,new QStandardItem(it.value().from));
            else if(j == 5)
                model->setItem(i,j,new QStandardItem(it.value().end));
            else if(j == 6)
                model->setItem(i,j,new QStandardItem(it.value().carNum));
            else if(j == 7)
                model->setItem(i,j,new QStandardItem(it.value().creatTime.toString("yyyy-MM-dd hh:mm:ss")));
            it ++;
        }
    }
}

void CurrentTask::refreshTable()
{
    setTableViewValue();
}

void CurrentTask::initTableView()
{
    m_table_view = new QTableView(this);
    m_table_view->horizontalHeader()->setStyleSheet(headstlye);
    m_table_view->move(5,10);
    m_table_view->verticalHeader()->hide();
    m_table_view->resize(width,height);

    model = new QStandardItemModel(10,8);
    m_table_view->setModel(model);

    m_table_view->setSelectionBehavior(QAbstractItemView::SelectRows);
    m_table_view->setEditTriggers(QAbstractItemView::AllEditTriggers);

    QStringList header;
    header<<"任务号"<<"任务状态"<<"料箱号"<<"优先级"<<"来源"<<"目标"<<"穿梭车号"<<"创建时间";
    for(int i = 0 ;i <header.size();i++)
    {
        model->setHeaderData(i, Qt::Horizontal, header.at(i));
    }
    m_table_view->setColumnWidth(0,width/20*1);
    m_table_view->setColumnWidth(1,width/20*2);
    m_table_view->setColumnWidth(2,width/20*3);
    m_table_view->setColumnWidth(3,width/20*2);

    m_table_view->setColumnWidth(4,width/20*2);
    m_table_view->setColumnWidth(5,width/20*2);
    m_table_view->setColumnWidth(6,width/20*2);
    m_table_view->setColumnWidth(7,width/20*3);
    m_table_view->horizontalHeader()->setMinimumHeight(40);
    m_table_view->setFont(QFont("宋体",12)); //设置字体
}
//save to crruntTask table
bool CurrentTask::saveTaskToDB(TaskInfoStru taskStru)
{
    QString err = "";
    if(!CRUDBaseOperation::getInstance()->saveCrruntTask(taskStru,err))
    {
        GetSystemLogObj()->writeLog(err,3);
        return false;
    }
    return true;

}

TaskInfoStru CurrentTask::ParsingWMSFrame(QString frame)
{
    TaskInfoStru t;
    QJsonParseError jsonParseError;
    QJsonDocument jsonDocument(QJsonDocument::fromJson(frame.toUtf8(), &jsonParseError));
    if(!jsonDocument.isNull()&&QJsonParseError::NoError == jsonParseError.error)//没有错误
    {
        if(jsonDocument.isObject())
        {
            QJsonObject jsonObject = jsonDocument.object();
            if(jsonObject.contains("regCode")&&jsonObject.value("regCode").isString())
            {
                //qDebug()<<"regCode"<<jsonObject.value("regCode").toString();
                t.regCode = jsonObject.value("regCode").toString();
            }
            if(jsonObject.contains("interfaceType")&&jsonObject.value("interfaceType").isString())
            {
                //qDebug()<<"interfaceType"<<jsonObject.value("interfaceType").toString();
                t.interfaceType = jsonObject.value("interfaceType").toString();
            }
            if(jsonObject.contains("from")&&jsonObject.value("from").isString())
            {
                //qDebug()<<"from"<<jsonObject.value("from").toString();
                t.from = jsonObject.value("from").toString();
            }
            if(jsonObject.contains("to")&&jsonObject.value("to").isString())
            {
                //qDebug()<<"to"<<jsonObject.value("to").toString();
                t.end = jsonObject.value("to").toString();
            }
            if(jsonObject.contains("taskId")&&jsonObject.value("taskId").isString())
            {
                //qDebug()<<"taskId"<<jsonObject.value("taskId").toString();
                t.taskNum = jsonObject.value("taskId").toString();
            }
            if(jsonObject.contains("taskMainType")&&jsonObject.value("taskMainType").isString())
            {
                //qDebug()<<"taskMainType"<<jsonObject.value("taskMainType").toString();
                t.taskMainType = jsonObject.value("taskMainType").toString();
            }
            if(jsonObject.contains("taskSonType")&&jsonObject.value("taskSonType").isString())
            {
                //qDebug()<<"taskSonType"<<jsonObject.value("taskSonType").toString();
                t.taskSonType = jsonObject.value("taskSonType").toString();
            }
            if(jsonObject.contains("status")&&jsonObject.value("status").isString())
            {
                //qDebug()<<"status"<<jsonObject.value("status").toString();
                t.status = jsonObject.value("status").toString();
            }
            if(jsonObject.contains("receiptNoType")&&jsonObject.value("receiptNoType").isString())
            {
                //qDebug()<<"receiptNoType"<<jsonObject.value("receiptNoType").toString();
                t.receiptNoType = jsonObject.value("receiptNoType").toString();
            }
            if(jsonObject.contains("containerCode")&&jsonObject.value("containerCode").isString())
            {
                //qDebug()<<"containerCode"<<jsonObject.value("containerCode").toString();
                t.boxNum = jsonObject.value("containerCode").toString();
            }
            if(jsonObject.contains("fromLocationCode")&&jsonObject.value("fromLocationCode").isString())
            {
                //qDebug()<<"fromLocationCode"<<jsonObject.value("fromLocationCode").toString();
                t.fromLocationCode = jsonObject.value("fromLocationCode").toString();
            }
            if(jsonObject.contains("toLocationCode")&&jsonObject.value("toLocationCode").isString())
            {
               // qDebug()<<"toLocationCode"<<jsonObject.value("toLocationCode").toString();
                t.shelves = jsonObject.value("toLocationCode").toString();
            }
            if(jsonObject.contains("taskResult")&&jsonObject.value("taskResult").isString())
            {
                //qDebug()<<"taskResult"<<jsonObject.value("taskResult").toString();
                t.taskResult = jsonObject.value("taskResult").toString();
            }
            if(jsonObject.contains("nowLocationCode")&&jsonObject.value("nowLocationCode").isString())
            {
                //qDebug()<<"nowLocationCode"<<jsonObject.value("nowLocationCode").toString();
                t.nowlocationCode = jsonObject.value("nowLocationCode").toString();
            }
            if(jsonObject.contains("abnormalLocationCode")&&jsonObject.value("abnormalLocationCode").isString())
            {
                //qDebug()<<"abnormalLocationCode"<<jsonObject.value("nowLocationCode").toString();
                t.abnormalLocationCode = jsonObject.value("nowLocationCode").toString();
            }
            if(jsonObject.contains("inbToLocationCode")&&jsonObject.value("inbToLocationCode").isString())
            {
                //qDebug()<<"inbToLocationCode"<<jsonObject.value("inbToLocationCode").toString();
                t.inbToLocationCode = jsonObject.value("inbToLocationCode").toString();
            }
            if(jsonObject.contains("responseMessage")&&jsonObject.value("responseMessage").isString())
            {
                //qDebug()<<"responseMessage"<<jsonObject.value("responseMessage").toString();
                t.responseMessage = jsonObject.value("responseMessage").toString();
            }
            if(jsonObject.contains("createTime")&&jsonObject.value("createTime").isString())
            {
<<<<<<< HEAD
                //qDebug()<<"createTime"<<jsonObject.value("createTime").toString();
              //  t.creatTime =
=======
                qDebug()<<"createTime"<<jsonObject.value("createTime").toString();
                QString datatimestr = jsonObject.value("createTime").toString();
                t.creatTime = QDateTime::fromString(datatimestr,"yyyy-MM-dd hh:mm");
>>>>>>> f25174e8f0b0acce3bf409eb0c053b619245542a
            }
            if(jsonObject.contains("requestTimes")&&jsonObject.value("requestTimes").isString())
            {
                //qDebug()<<"requestTimes"<<jsonObject.value("requestTimes").toString();
                t.requestTimes = jsonObject.value("requestTimes").toString();
            }
        }
    }
    else{
        qDebug() << QString("FROM WMS TO WCS  JsonParseError: %1").arg(jsonParseError.errorString());
    }
   // t.creatTime = QDateTime::currentDateTime();
    return t;
}

void CurrentTask::reply2Wms(const TaskInfoStru &t)
{
    Jeson2Object j;
    QByteArray array = j.makeBody(t,150,"流道",true,"");
    qDebug()<<QString(array);
    HttpClien_k *k = new HttpClien_k();
    OrderStru o;
    o.http.body = array;
    o.http.url = Myconfig::GetInstance()->inOfWareHouseUrl;
    QString errmsg = "";
    k->setParameter(o,0);
    k->runInstruction();
    k->getResult(errmsg);
}
///
/// \brief CurrentTask::putBox 当wms发送入库任务时，将缓存区的料想推到流道
/// \param cache 缓存位的编号
///
void CurrentTask::putBox(int cache)
{
    OrderStru o;
    o.value = 99;
    o.order = call_Runner_Putbox;
    o.startaddress = cache;//*2 + 60;
    o.Datatype = 4;
    o.childtype = 2; //modebus read or write ;read = 5 other is write
    AbstructInstruction *e = new RunnerInstruction();
    e->setParameter(o,Myconfig::GetInstance()->m_runer.deviceNum.toInt());
    e->runInstruction();
    QString resultMsg ="";
    e->getResult(resultMsg);
    qDebug()<<resultMsg;
}

void CurrentTask::handelHttpTask(QString reply)
{
     TaskInfoStru t = ParsingWMSFrame(reply);
    //saveTaskToDB(t);
     if(t.taskMainType == "出库")
     {
         QMutexLocker locker(&Myconfig::GetInstance()->m_task_mutex);
         Myconfig::GetInstance()->m_taskQueue.enqueue(t);
          qDebug()<<"添加出库任务";
     }
     else
     {
         QMutexLocker(&Myconfig::GetInstance()->m_in_task_mutex);
         Myconfig::GetInstance()->m_in_taskMap.insert(t.boxNum,t);
         //runner instruction put box to runner
         putBox(t.fromLocationCode.toInt());
         //reply wms
         reply2Wms(t);

         qDebug()<<"添加入库任务";
     }
    QMutexLocker(&Myconfig::GetInstance()->m_mutex_taskMap);
    Myconfig::GetInstance()->m_taskMap.insert(t.taskNum,t);
    QString errMsg = "";
//    if(!CRUDBaseOperation::getInstance()->saveKBaseStruct("t_crrunt_task",t,errMsg))
//        GetSystemLogObj()->writeLog("save current to dbbase failed! ->"+errMsg,2);
    setTableViewValue();
   // qDebug()<<reply;
}
